import base.*;
import animals.*;
import java.util.*;
import java.text.*;
// üìå –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã
public class Main {
    private static final List<Animal> animalsRegistry = new ArrayList<>();
    private static final Scanner scanner = new Scanner(System.in);
    private static final Map<String, Class<? extends Animal>> animalTypes = new HashMap<>();

    static {
        animalTypes.put("Dog", Dog.class);
        animalTypes.put("Cat", Cat.class);
        animalTypes.put("Hamster", Hamster.class);
        animalTypes.put("Horse", Horse.class);
        animalTypes.put("Camel", Camel.class);
        animalTypes.put("Donkey", Donkey.class);
    }

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é:");
            System.out.println("1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ");
            System.out.println("2. üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö");
            System.out.println("3. üê∂ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–º—É");
            System.out.println("4. üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("5. ü¶∏‚Äç‚ôÄÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("6. üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("7. üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è");
            System.out.println("8. üî¢ –í—ã–≤–µ—Å—Ç–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö");
            System.out.println("9. ‚ùå –í—ã—Ö–æ–¥");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞

            switch (choice) {
                case 1:
                    addNewAnimal();
                    break;
                case 2:
                    showAllAnimals();
                    break;
                case 3:
                    addCommandToAnimal();
                    break;
                case 4:
                    showAnimalCommands();
                    break;
                case 5:
                    performAnimalCommand();
                    break;
                case 6:
                    registerNewAnimalType();
                    break;
                case 7:
                    showAnimalsByBirthDate();
                    break;
                case 8:
                    showTotalAnimalsCount();
                    break;
                case 9:
                    System.out.println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                    return;
                default:
                    System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private static void addNewAnimal() {
        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö: " + animalTypes.keySet());
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ");
        String type = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ");
        String birthDate = scanner.nextLine();

        if (!animalTypes.containsKey(type)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return;
        }

        try {
            Animal newAnimal = animalTypes.get(type)
                    .getDeclaredConstructor(String.class, String.class)
                    .newInstance(name, birthDate);
            animalsRegistry.add(newAnimal);
            System.out.println("‚úÖ " + newAnimal + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä.");
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: " + e.getMessage());
        }
    }

    private static void showAllAnimals() {
        if (animalsRegistry.isEmpty()) {
            System.out.println("üì≠ –†–µ–µ—Å—Ç—Ä –ø—É—Å—Ç.");
        } else {
            System.out.println("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö:");
            for (Animal animal : animalsRegistry) {
                System.out.println(animal);
            }
        }
    }

    private static void addCommandToAnimal() {
        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:");
        for (int i = 0; i < animalsRegistry.size(); i++) {
            System.out.println(i + 1 + ". " + animalsRegistry.get(i));
        }

        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (–Ω–æ–º–µ—Ä): ");
        int animalIndex = scanner.nextInt() - 1;
        scanner.nextLine();
        if (animalIndex < 0 || animalIndex >= animalsRegistry.size()) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: ");
        String command = scanner.nextLine();
        animalsRegistry.get(animalIndex).learnCommand(command, () -> 
            System.out.println(animalsRegistry.get(animalIndex) + " performs the command: " + command)
        );
    }

    private static void showAnimalCommands() {
        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:");
        for (int i = 0; i < animalsRegistry.size(); i++) {
            System.out.println(i + 1 + ". " + animalsRegistry.get(i));
        }

        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (–Ω–æ–º–µ—Ä): ");
        int animalIndex = scanner.nextInt() - 1;
        scanner.nextLine();
        if (animalIndex < 0 || animalIndex >= animalsRegistry.size()) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }

        animalsRegistry.get(animalIndex).showCommands();
    }

    private static void performAnimalCommand() {
        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:");
        for (int i = 0; i < animalsRegistry.size(); i++) {
            System.out.println(i + 1 + ". " + animalsRegistry.get(i));
        }

        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (–Ω–æ–º–µ—Ä): ");
        int animalIndex = scanner.nextInt() - 1;
        scanner.nextLine();
        if (animalIndex < 0 || animalIndex >= animalsRegistry.size()) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }
        
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ");
        String command = scanner.nextLine();

        animalsRegistry.get(animalIndex).executeCommand(command);
    }

    private static void registerNewAnimalType() {
        System.out.print("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–ø—Ä–∏–º–µ—Ä: Chicken): ");
        String typeName = scanner.nextLine();
        System.out.print("üìå –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ (Pets) –∏–ª–∏ –≤—å—é—á–Ω–æ–µ (PackAnimals) –∂–∏–≤–æ—Ç–Ω–æ–µ? (Pets/PackAnimals): ");
        String category = scanner.nextLine();

        if (animalTypes.containsKey(typeName)) {
            System.out.println("‚ö†Ô∏è –≠—Ç–æ—Ç –≤–∏–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return;
        }

        Class<? extends Animal> parentClass;
        if (category.equalsIgnoreCase("Pets")) {
            parentClass = Pets.class;
        } else if (category.equalsIgnoreCase("PackAnimals")) {
            parentClass = PackAnimals.class;
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.");
            return;
        }

        animalTypes.put(typeName, parentClass);
        System.out.println("‚úÖ –ù–æ–≤—ã–π –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ " + typeName + " —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    private static void showAnimalsByBirthDate() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
        String inputDate = scanner.nextLine();

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date inputParsedDate;
        try {
            inputParsedDate = dateFormat.parse(inputDate);
        } catch (ParseException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.");
            return;
        }

        System.out.println("üìÖ –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è " + inputDate + ":");
        boolean found = false;
        for (Animal animal : animalsRegistry) {
            if (animal.getBirthDate().equals(inputDate)) {
                System.out.println(animal);
                found = true;
            }
        }
        if (!found) {
            System.out.println("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–π –¥–∞—Ç–µ.");
        }
    }

    private static void showTotalAnimalsCount() {
        System.out.println("üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: " + Animal.getTotalCount());
    }
}
