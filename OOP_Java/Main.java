import base.*;
import animals.*;
import java.util.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

// üìå –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã
public class Main {
    private static final List<Animal> animalsRegistry = new ArrayList<>();
    private static final Scanner scanner = new Scanner(System.in);
    private static final Map<String, Class<? extends Animal>> animalTypes = new HashMap<>();
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    // üîπ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    static {
        animalTypes.put("Dog", Dog.class);
        animalTypes.put("Cat", Cat.class);
        animalTypes.put("Hamster", Hamster.class);
        animalTypes.put("Horse", Horse.class);
        animalTypes.put("Camel", Camel.class);
        animalTypes.put("Donkey", Donkey.class);
    }

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é:");
            System.out.println("1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ");
            System.out.println("2. üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö");
            System.out.println("3. üê∂ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–º—É");
            System.out.println("4. üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("5. ü¶∏‚Äç‚ôÄÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("6. üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ");
            System.out.println("7. üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è");
            System.out.println("8. üî¢ –í—ã–≤–µ—Å—Ç–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö");
            System.out.println("9. ‚ùå –í—ã—Ö–æ–¥");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ");

            int choice = getIntInput(); // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞

            switch (choice) {
                case 1:
                    addNewAnimal();
                    break;
                case 2:
                    showAllAnimals();
                    break;
                case 3:
                    addCommandToAnimal();
                    break;
                case 4:
                    showAnimalCommands();
                    break;
                case 5:
                    performAnimalCommand();
                    break;
                case 6:
                    registerNewAnimalType();
                    break;
                case 7:
                    showAnimalsByBirthDate();
                    break;
                case 8:
                    showTotalAnimalsCount();
                    break;
                case 9:
                    System.out.println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                    return;
                default:
                    System.out.println("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9.");
            }
        }
    }

    // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    private static void addNewAnimal() {
        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö: " + animalTypes.keySet());
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ");
        String type = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ");
        String name = scanner.nextLine();
        
        LocalDate birthDate = getValidDateInput(); // üìÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É

        if (!animalTypes.containsKey(type)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return;
        }

        try {
            Animal newAnimal = animalTypes.get(type)
                    .getDeclaredConstructor(String.class, LocalDate.class) // üü¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç LocalDate
                    .newInstance(name, birthDate);
            animalsRegistry.add(newAnimal);
            System.out.println("‚úÖ " + newAnimal + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä.");
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: " + e.getMessage());
        }
    }

    // üîπ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    private static void showAllAnimals() {
        if (animalsRegistry.isEmpty()) {
            System.out.println("üì≠ –†–µ–µ—Å—Ç—Ä –ø—É—Å—Ç.");
        } else {
            System.out.println("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö:");
            for (Animal animal : animalsRegistry) {
                System.out.println(animal);
            }
        }
    }

    // üîπ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–º—É
    private static void addCommandToAnimal() {
        Animal animal = selectAnimal();
        if (animal == null) return;

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: ");
        String command = scanner.nextLine();
        animal.learnCommand(command, () -> 
            System.out.println(animal + " –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É: " + command)
        );
    }

    // üîπ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    private static void showAnimalCommands() {
        Animal animal = selectAnimal();
        if (animal == null) return;

        animal.showCommands();
    }

    // üîπ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    private static void performAnimalCommand() {
        Animal animal = selectAnimal();
        if (animal == null) return;

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ");
        String command = scanner.nextLine();
        animal.executeCommand(command);
    }

    // üîπ –í—ã–±–æ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    private static Animal selectAnimal() {
        if (animalsRegistry.isEmpty()) {
            System.out.println("üì≠ –í —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö.");
            return null;
        }

        System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:");
        for (int i = 0; i < animalsRegistry.size(); i++) {
            System.out.println((i + 1) + ". " + animalsRegistry.get(i));
        }

        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (–Ω–æ–º–µ—Ä): ");
        int animalIndex = getIntInput() - 1;
        if (animalIndex < 0 || animalIndex >= animalsRegistry.size()) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return null;
        }
        return animalsRegistry.get(animalIndex);
    }
    
    // üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    private static void registerNewAnimalType() {
        System.out.print("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–ø—Ä–∏–º–µ—Ä: Chicken): ");
        String typeName = scanner.nextLine();
        System.out.print("üìå –≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ (Pets) –∏–ª–∏ –≤—å—é—á–Ω–æ–µ (PackAnimals) –∂–∏–≤–æ—Ç–Ω–æ–µ? (Pets/PackAnimals): ");
        String category = scanner.nextLine();

        if (animalTypes.containsKey(typeName)) {
            System.out.println("‚ö†Ô∏è –≠—Ç–æ—Ç –≤–∏–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return;
        }

        Class<? extends Animal> parentClass;
        if (category.equalsIgnoreCase("Pets")) {
            parentClass = Pets.class;
        } else if (category.equalsIgnoreCase("PackAnimals")) {
            parentClass = PackAnimals.class;
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.");
            return;
        }

        animalTypes.put(typeName, parentClass);
        System.out.println("‚úÖ –ù–æ–≤—ã–π –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ " + typeName + " —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    // üîπ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    private static void showAnimalsByBirthDate() {
        LocalDate inputDate = getValidDateInput(); // üìÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É

        System.out.println("üìÖ –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è " + inputDate + ":");
        boolean found = false;
        for (Animal animal : animalsRegistry) {
            if (animal.getBirthDate().equals(inputDate)) { // üü¢ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º LocalDate
                System.out.println(animal);
                found = true;
            }
        }
        if (!found) {
            System.out.println("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.");
        }
    }

    // üîπ –í—ã–≤–µ—Å—Ç–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    private static void showTotalAnimalsCount() {
        System.out.println("üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: " + Animal.getTotalCount());
    }

    // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
    private static int getIntInput() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: ");
            }
        }
    }
    
    // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    private static LocalDate getValidDateInput() {
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ");
            String inputDate = scanner.nextLine().trim();

            try {
                return LocalDate.parse(inputDate, DATE_FORMATTER); // üü¢ –ü–∞—Ä—Å–∏–º LocalDate
            } catch (DateTimeParseException e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.");
            }
        }
    }
}
